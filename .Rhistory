setorder(SQL, person_id,Concept,Type2,start_date_record,Code2, code_no_dot2)
test <- LOOP == SQL
nb <- nb + 1
if(sum(test == F) > 0) print(i) else print(nb)
}
nb <- 1
for(i in unique(codesheet[["Concept"]])){
LOOP <- readRDS(paste0("C:/TESTLOOP/",i,".rds"))[,.(person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)]
setorder(LOOP, person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)
SQL <- readRDS(paste0("C:/TESTSQL/",i,".rds"))[,.(person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)]
setorder(SQL, person_id,Concept,Type2,start_date_record,Code2, code_no_dot2)
test <- LOOP == SQL
if(sum(test == F) > 0) print(i) else print(nb)
nb <- nb + 1
}
nb <- 1
for(i in unique(codesheet[["Concept"]])){
LOOP <- readRDS(paste0("C:/TESTLOOP/",i,".rds"))[,.(person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)]
setorder(LOOP, person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)
SQL <- readRDS(paste0("C:/TESTSQL/",i,".rds"))[,.(person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)]
setorder(SQL, person_id,Concept,Type2,start_date_record,Code2, code_no_dot2)
test <- LOOP == SQL
if(sum(test == F) > 0) print(i) else print(nb)
nb <- nb + 1
rm(SQL,LOOP,test)
gc()
}
CAD <- readRDS("C:/TESTLOOP/CAD.rds")
View(CAD)
colnames(SQL) == colnames(LOOP)
sum(colnames(SQL) == colnames(LOOP) == F)
sum((colnames(SQL) == colnames(LOOP)) == F)
if(sum((colnames(SQL) == colnames(LOOP)) == F) > 0) print(paste0(i," has unequal colnames"))
print(paste0(i," has unequal colnames")
print(paste0(i," has unequal colnames"))
if(sum((nrow(SQL) == nrow(LOOP)) == F) > 0) print(paste0(i," has unequal number of rows"))
if(sum((ncol(SQL) == ncol(LOOP)) == F) > 0) print(paste0(i," has unequal number of columns"))
for(i in unique(codesheet[["Concept"]])){
LOOP <- readRDS(paste0("C:/TESTLOOP/",i,".rds"))[,.(person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)]
setorder(LOOP, person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)
SQL <- readRDS(paste0("C:/TESTSQL/",i,".rds"))[,.(person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)]
setorder(SQL, person_id,Concept,Type2,start_date_record,Code2, code_no_dot2)
check <- T
if(sum((nrow(SQL) == nrow(LOOP)) == F) > 0){
print(paste0(i," has unequal number of rows"))
check <- F
}
if(sum((ncol(SQL) == ncol(LOOP)) == F) > 0){
print(paste0(i," has unequal number of columns"))
check <- F
}
if(sum((colnames(SQL) == colnames(LOOP)) == F) > 0){
print(paste0(i," has unequal colnames"))
check <- F
}
if(check){
test <- LOOP == SQL
if(sum(test == F) > 0) print(i) else print(paste0(i," correct"))
}
rm(SQL,LOOP,test)
gc()
}
for(i in unique(codesheet[["Concept"]])){
LOOP <- readRDS(paste0("C:/TESTLOOP/",i,".rds"))[,.(person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)]
setorder(LOOP, person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)
SQL <- readRDS(paste0("C:/TESTSQL/",i,".rds"))[,.(person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)]
setorder(SQL, person_id,Concept,Type2,start_date_record,Code2, code_no_dot2)
check <- T
if(sum((nrow(SQL) == nrow(LOOP)) == F) > 0){
print(paste0(i," has unequal number of rows"))
check <- F
}
if(sum((ncol(SQL) == ncol(LOOP)) == F) > 0){
print(paste0(i," has unequal number of columns"))
check <- F
}
if(sum((colnames(SQL) == colnames(LOOP)) == F) > 0){
print(paste0(i," has unequal colnames"))
check <- F
}
if(check){
test <- LOOP == SQL
if(sum(test == F) > 0) print(i) else print(paste0(i," correct"))
rm(test)
}
rm(SQL,LOOP)
gc()
}
View(Events)
View(codesheet)
codesheet[["code"]]
codesheet[["Code"]]
str_detect(codesheet[["Code"]], "B")
str_detect(codesheet[["Code"]], "*")
str_detect(codesheet[["Code"]], "[A-Z]")
str_detect(codesheet[["Code"]], "[A-Z]|[1-9]")
str_detect(codesheet[["Code"]], "[A-Z]|[1-9]|.")
str_detect(codesheet[["Code"]], "[A-Z]|[1-9]|.", negate = T)
codesheet[["Code"]][str_detect(codesheet[["Code"]], "[A-Z]|[1-9]|.", negate = T)]
test <- "402.*"
grep[test,"[A-Z]|[1-9]|."]
test <- "402.*"
grep[test,"[A-Z]|[1-9]|."]
grep["[A-Z]|[1-9]|.", test]
grep("[A-Z]|[1-9]|.", test)
grep(!"[A-Z]|[1-9]|.", test)
grep("![A-Z]|![1-9]|!.", test)
grep("![A-Z]|![1-9]|.", test)
grep("[A-Z]|![1-9]|.", test)
grepl("[A-Z]|![1-9]|.", test)
grepl("![A-Z]|![1-9]|!.", test)
grepl("![A-Z]|![1-9]|.", test)
grepl(".", test)
grepl("&", test)
grepl("&|.", test)
grepl("&|%", test)
test <- "402.*"
grepl("[A-Z]|[1-9]|.", test)
grepl("[A-Z]|[1-9]|.", test, ignore.case = T, invert = T)
grep("&|%", test)
grep("&|.", test)
grep("&|.", test)
grepl("&|.", test)
grepl("any(&|.)", test)
grepl("&|.", test)
#' This is my first package
#'
#'
#' @section ??
#'
#' @author
#' Roel Elbers
#'
#' @docType package
#' @name PrepCDM
#' @keywords ??
#' @import data.table
NULL
#' @param codesheet data.table file with the codes, concept and coding system
#' @param file CDM table with codes
#' @param c.voc codesheet coding system column name
#' @param c.concept codesheet concept column name
#' @param c.codes codesheet code column name
#' @param coding systems that merges based on start with
#' @param f.code file code column name
#' @param f.voc file coding system column name
#' @param path location to write the RDS files to per concept name
#' @param method if SQL, a join is used. If loop a loop is used to subset
#' @result RDS files to per concept name with the rows that have the code specified in the codesheet
#' @export
CreateConceptDatasets <- function(codesheet,file, c.voc, c.concept,c.codes,c.startwith,f.code,f.voc,path,method = "SQL" ){
#Get data. If not use copy input dataset may be affected (see data.table properties)
codesheet <- copy(codesheet)
file <- copy(file)
#Check if vocabulary matches the feeded codesheet coding system.
systems_data <- unique(na.omit(file[[f.voc]]))
systems_codesheet <- unique(na.omit(codesheet[[c.voc]]))
systems_analysed <- systems_data[systems_data %in% systems_codesheet]
systems_nanalysed <- systems_data[!systems_data %in% systems_codesheet]
if(length(systems_nanalysed) > 0) print(paste0(systems_nanalysed," is not in codesheet so these rows are lost."))
#check if specified c.startwith is in codesheet
if(sum(!c.startwith %in% systems_codesheet > 0)) print("check c.startwith, misspelling occured resulting in missing codes")
#Standardize columns names. This to prevent the use of the get, eval statements which complicate code readability and give sometimes complex errors
setnames(codesheet,c(c.voc,c.concept,c.codes),c("Type","Concept","Code"))
setnames(file,c(f.voc,f.code),c("Type2","Code2"))
#Create variable code_no_dot by removing dot from all codes
codesheet[,code_no_dot := gsub("\\.","",codesheet[,Code])]
file[,code_no_dot2 := gsub("\\.","",file[,Code2])]
#codesheet[,dot_present := str_detect(codesheet[,Code],"\\.")]
#Merge codesheet to data file using sql. Then it is possible to merge on start_with or exact in 1 step
if(method == "SQL"){
codesheet[,start_with := fifelse(substr(Code,nchar(Code),nchar(Code) + 1) == "." | Type %in% c.startwith ,"T","F")]
TEMP1 <- sqldf("
select distinct t1.*, t2.Concept
from file t1
inner join codesheet t2
on (
t1.Type2 = t2.Type
and
(
(
t2.start_with = 'T'
and
substr(t1.code_no_dot2,1,length(t2.code_no_dot)) = substr(t2.code_no_dot,1,length(t2.code_no_dot))
)
or
(
t2.start_with = 'F'
and
t1.code_no_dot2 = t2.code_no_dot
)
)
)
")
TEMP1 <- as.data.table(TEMP1)
TEMP1 <- TEMP[, Concept := names(conditions1)[[i]]]
#TEMP[,start_with := NULL]
setorder(TEMP1, person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)
setnames(TEMP1,c("Type2","Code2","code_no_dot2","Concept"),c(f.voc,f.code,paste0(f.code,"_2"),c.concept))
for(i in unique(codesheet[["Concept"]])){
TEMP2 <- TEMP1[get(c.concept) == i,]
saveRDS(object = TEMP2, file = paste0(path,"/",i,".rds"))
rm(TEMP2)
gc()
}
rm(TEMP1)
gc()
}
if(method == "loop"){
#Create variable to distinct codes that need to be extracted based on start with and not exact.
codesheet[,start_with := fifelse(substr(Code,nchar(Code),nchar(Code) + 1) == "." | Type %in% c.startwith ,T,F)]
# Create list for the for loop
#First 1 list with codes for exact matching
conditions1<-vector(mode="list", length=length(unique(na.omit(codesheet[["Concept"]]))))
names(conditions1)<-unique(na.omit(codesheet[["Concept"]]))
for (i in 1:length(conditions1)){
vocabularies<-vector(mode="list", length=length(systems_analysed))
names(vocabularies)<-systems_analysed
for (j in 1:length(vocabularies)){
vocabularies[[j]]$exact <- codesheet[Concept == names(conditions1)[i] & Type == names(vocabularies)[j] & start_with == F, code_no_dot]
vocabularies[[j]]$start <- codesheet[Concept == names(conditions1)[i] & Type == names(vocabularies)[j] & start_with == T, code_no_dot]
}
conditions1[[i]]<-list.append(conditions1[[i]],vocabularies)
rm(vocabularies)
}
#remove empty vocabularies
conditions1<-lapply(conditions1, function(x) Filter(length, x))
#Write codes to disk per concepts
for(i in 1:length(names(conditions1))){
TEMP <- file[0]
for(j in 1:length(names(conditions1[[j]]))){
TEMP2 <- copy(file)
TEMP2 <- unique(TEMP2[
Type2 == names(conditions1[[i]][j])
&
(
length(conditions1[[i]][[j]]$start) > 0 & grepl(pattern =  paste0("^",conditions1[[i]][[j]]$start,collapse ="|"), x = code_no_dot2)
|
length(conditions1[[i]][[j]]$exact) > 0 & code_no_dot2 %in% conditions1[[i]][[j]]$exact
)
,])
TEMP <- rbindlist(list(TEMP,TEMP2),fill = T, use.names = T)
rm(TEMP2)
}
TEMP <- TEMP[, Concept := names(conditions1)[[i]]]
#TEMP[,start_with := NULL]
setorder(TEMP, person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)
setnames(TEMP,c("Type2","Code2","code_no_dot2","Concept"),c(f.voc,f.code,paste0(f.code,"_2"),c.concept))
saveRDS(object = TEMP, file = paste0(path,"/",names(conditions1)[[i]],".rds"))
rm(TEMP)
gc()
}
}
}
peakRAM(CreateConceptDatasets(
codesheet = FILE,
c.voc = "Coding_system",
c.concept = "sheet",
c.codes = "Code",
file = Events,
f.code = "event_code",
f.voc =  "event_record_vocabulary",
c.startwith = c("ICD10/CM","ICD9CM","ICD9"),
path = "C:/TESTSQL",
method = "SQL"
))
#' This is my first package
#'
#'
#' @section ??
#'
#' @author
#' Roel Elbers
#'
#' @docType package
#' @name PrepCDM
#' @keywords ??
#' @import data.table
NULL
#' @param codesheet data.table file with the codes, concept and coding system
#' @param file CDM table with codes
#' @param c.voc codesheet coding system column name
#' @param c.concept codesheet concept column name
#' @param c.codes codesheet code column name
#' @param coding systems that merges based on start with
#' @param f.code file code column name
#' @param f.voc file coding system column name
#' @param path location to write the RDS files to per concept name
#' @param method if SQL, a join is used. If loop a loop is used to subset
#' @result RDS files to per concept name with the rows that have the code specified in the codesheet
#' @export
CreateConceptDatasets <- function(codesheet,file, c.voc, c.concept,c.codes,c.startwith,f.code,f.voc,path,method = "SQL" ){
#Get data. If not use copy input dataset may be affected (see data.table properties)
codesheet <- copy(codesheet)
file <- copy(file)
#Check if vocabulary matches the feeded codesheet coding system.
systems_data <- unique(na.omit(file[[f.voc]]))
systems_codesheet <- unique(na.omit(codesheet[[c.voc]]))
systems_analysed <- systems_data[systems_data %in% systems_codesheet]
systems_nanalysed <- systems_data[!systems_data %in% systems_codesheet]
if(length(systems_nanalysed) > 0) print(paste0(systems_nanalysed," is not in codesheet so these rows are lost."))
#check if specified c.startwith is in codesheet
if(sum(!c.startwith %in% systems_codesheet > 0)) print("check c.startwith, misspelling occured resulting in missing codes")
#Standardize columns names. This to prevent the use of the get, eval statements which complicate code readability and give sometimes complex errors
setnames(codesheet,c(c.voc,c.concept,c.codes),c("Type","Concept","Code"))
setnames(file,c(f.voc,f.code),c("Type2","Code2"))
#Create variable code_no_dot by removing dot from all codes
codesheet[,code_no_dot := gsub("\\.","",codesheet[,Code])]
file[,code_no_dot2 := gsub("\\.","",file[,Code2])]
#codesheet[,dot_present := str_detect(codesheet[,Code],"\\.")]
#Merge codesheet to data file using sql. Then it is possible to merge on start_with or exact in 1 step
if(method == "SQL"){
codesheet[,start_with := fifelse(substr(Code,nchar(Code),nchar(Code) + 1) == "." | Type %in% c.startwith ,"T","F")]
TEMP1 <- sqldf("
select distinct t1.*, t2.Concept
from file t1
inner join codesheet t2
on (
t1.Type2 = t2.Type
and
(
(
t2.start_with = 'T'
and
substr(t1.code_no_dot2,1,length(t2.code_no_dot)) = substr(t2.code_no_dot,1,length(t2.code_no_dot))
)
or
(
t2.start_with = 'F'
and
t1.code_no_dot2 = t2.code_no_dot
)
)
)
")
TEMP1 <- as.data.table(TEMP1)
#TEMP1[,start_with := NULL]
setorder(TEMP1, person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)
setnames(TEMP1,c("Type2","Code2","code_no_dot2","Concept"),c(f.voc,f.code,paste0(f.code,"_2"),c.concept))
for(i in unique(codesheet[["Concept"]])){
TEMP2 <- TEMP1[get(c.concept) == i,]
saveRDS(object = TEMP2, file = paste0(path,"/",i,".rds"))
rm(TEMP2)
gc()
}
rm(TEMP1)
gc()
}
if(method == "loop"){
#Create variable to distinct codes that need to be extracted based on start with and not exact.
codesheet[,start_with := fifelse(substr(Code,nchar(Code),nchar(Code) + 1) == "." | Type %in% c.startwith ,T,F)]
# Create list for the for loop
#First 1 list with codes for exact matching
conditions1<-vector(mode="list", length=length(unique(na.omit(codesheet[["Concept"]]))))
names(conditions1)<-unique(na.omit(codesheet[["Concept"]]))
for (i in 1:length(conditions1)){
vocabularies<-vector(mode="list", length=length(systems_analysed))
names(vocabularies)<-systems_analysed
for (j in 1:length(vocabularies)){
vocabularies[[j]]$exact <- codesheet[Concept == names(conditions1)[i] & Type == names(vocabularies)[j] & start_with == F, code_no_dot]
vocabularies[[j]]$start <- codesheet[Concept == names(conditions1)[i] & Type == names(vocabularies)[j] & start_with == T, code_no_dot]
}
conditions1[[i]]<-list.append(conditions1[[i]],vocabularies)
rm(vocabularies)
}
#remove empty vocabularies
conditions1<-lapply(conditions1, function(x) Filter(length, x))
#Write codes to disk per concepts
for(i in 1:length(names(conditions1))){
TEMP <- file[0]
for(j in 1:length(names(conditions1[[j]]))){
TEMP2 <- copy(file)
TEMP2 <- unique(TEMP2[
Type2 == names(conditions1[[i]][j])
&
(
length(conditions1[[i]][[j]]$start) > 0 & grepl(pattern =  paste0("^",conditions1[[i]][[j]]$start,collapse ="|"), x = code_no_dot2)
|
length(conditions1[[i]][[j]]$exact) > 0 & code_no_dot2 %in% conditions1[[i]][[j]]$exact
)
,])
TEMP <- rbindlist(list(TEMP,TEMP2),fill = T, use.names = T)
rm(TEMP2)
}
TEMP <- TEMP[, Concept := names(conditions1)[[i]]]
#TEMP[,start_with := NULL]
setorder(TEMP, person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)
setnames(TEMP,c("Type2","Code2","code_no_dot2","Concept"),c(f.voc,f.code,paste0(f.code,"_2"),c.concept))
saveRDS(object = TEMP, file = paste0(path,"/",names(conditions1)[[i]],".rds"))
rm(TEMP)
gc()
}
}
}
peakRAM(CreateConceptDatasets(
codesheet = FILE,
c.voc = "Coding_system",
c.concept = "sheet",
c.codes = "Code",
file = Events,
f.code = "event_code",
f.voc =  "event_record_vocabulary",
c.startwith = c("ICD10/CM","ICD9CM","ICD9"),
path = "C:/TESTSQL",
method = "SQL"
))
peakRAM(CreateConceptDatasets(
codesheet = FILE,
c.voc = "Coding_system",
c.concept = "sheet",
c.codes = "Code",
file = Events,
f.code = "event_code",
f.voc =  "event_record_vocabulary",
c.startwith = c("ICD10/CM","ICD9CM","ICD9"),
path = "C:/TESTLOOP",
method = "loop"
))
for(i in unique(codesheet[["Concept"]])){
LOOP <- readRDS(paste0("C:/TESTLOOP/",i,".rds"))[,.(person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)]
setorder(LOOP, person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)
SQL <- readRDS(paste0("C:/TESTSQL/",i,".rds"))[,.(person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)]
setorder(SQL, person_id,Concept,Type2,start_date_record,Code2, code_no_dot2)
check <- T
if(sum((nrow(SQL) == nrow(LOOP)) == F) > 0){
print(paste0(i," has unequal number of rows"))
check <- F
}
if(sum((ncol(SQL) == ncol(LOOP)) == F) > 0){
print(paste0(i," has unequal number of columns"))
check <- F
}
if(sum((colnames(SQL) == colnames(LOOP)) == F) > 0){
print(paste0(i," has unequal colnames"))
check <- F
}
if(check){
test <- LOOP == SQL
if(sum(test == F) > 0) print(i) else print(paste0(i," correct"))
rm(test)
}
rm(SQL,LOOP)
gc()
}
for(i in unique(codesheet[["Concept"]])){
LOOP <- readRDS(paste0("C:/TESTLOOP/",i,".rds"))[,.(person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)]
#setorder(LOOP, person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)
SQL <- readRDS(paste0("C:/TESTSQL/",i,".rds"))[,.(person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)]
#setorder(SQL, person_id,Concept,Type2,start_date_record,Code2, code_no_dot2)
check <- T
if(sum((nrow(SQL) == nrow(LOOP)) == F) > 0){
print(paste0(i," has unequal number of rows"))
check <- F
}
if(sum((ncol(SQL) == ncol(LOOP)) == F) > 0){
print(paste0(i," has unequal number of columns"))
check <- F
}
if(sum((colnames(SQL) == colnames(LOOP)) == F) > 0){
print(paste0(i," has unequal colnames"))
check <- F
}
if(check){
test <- LOOP == SQL
if(sum(test == F) > 0) print(i) else print(paste0(i," correct"))
rm(test)
}
rm(SQL,LOOP)
gc()
}
for(i in unique(codesheet[["Concept"]])){
LOOP <- readRDS(paste0("C:/TESTLOOP/",i,".rds"))[,.(person_id, sheet,event_record_vocabulary, start_date_record,event_code, event_code_2)]
#setorder(LOOP, person_id, Concept,Type2, start_date_record,Code2, code_no_dot2)
SQL <- readRDS(paste0("C:/TESTSQL/",i,".rds"))[,.(person_id, sheet,event_record_vocabulary, start_date_record,event_code, event_code_2)]
#setorder(SQL, person_id,Concept,Type2,start_date_record,Code2, code_no_dot2)
check <- T
if(sum((nrow(SQL) == nrow(LOOP)) == F) > 0){
print(paste0(i," has unequal number of rows"))
check <- F
}
if(sum((ncol(SQL) == ncol(LOOP)) == F) > 0){
print(paste0(i," has unequal number of columns"))
check <- F
}
if(sum((colnames(SQL) == colnames(LOOP)) == F) > 0){
print(paste0(i," has unequal colnames"))
check <- F
}
if(check){
test <- LOOP == SQL
if(sum(test == F) > 0) print(i) else print(paste0(i," correct"))
rm(test)
}
rm(SQL,LOOP)
gc()
}
rm(list = ls(all=TRUE))
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
if(!require(devtools)){install.packages("devtools")}
library(devtools)
if(!require(knitr)){install.packages("knitr")}
library(knitr)
devtools::install_github("klutometis/roxygen")
usethis::use_roxygen_md("C:/PrepCDM")
setwd("C:/PrepCDM")
usethis::use_roxygen_md()
install.packages("PrepCDM")
library("PrepCDM")
??CreateConceptDatasets
?CreateConceptDatasets()
??CreateConceptDatasets()
