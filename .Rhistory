setnames(FILE1, c("col","dt"), c("pregnant","dt_pregnant"))
FILE2 <- unique(FILE[col == "end_of_pregnancy",])
View(FILE1)
View(FILE2)
View(FILE)
library("data.table")
path <- "Y:/Studies/ConcePTION/B_Documentation/2 Protocol_DSMB_Monitoring/WP 7.6 Data Characterization SAP/tmp_RE/Coding/level3/Preg_exlusions/"
col <- "name_event"
id <- "person_id"
dt <- "date_event"
FILE <- fread(file = paste0(path,"input_preg.csv"))
setnames(FILE, c(col,id,dt), c("col","id","dt"))
FILE <- FILE[, index := seq_len(.N)]
FILE1 <- unique(FILE[col == "start_of_pregnancy",])[, index := NULL]
setnames(FILE1, c("col","dt"), c("pregnant","dt_pregnant"))
FILE2 <- unique(FILE[col == "end_of_prengnancy",])
View(FILE2)
View(FILE1)
FILE1 <- unique(FILE[col == "start_of_pregnancy",])
View(FILE3)
library("data.table")
path <- "Y:/Studies/ConcePTION/B_Documentation/2 Protocol_DSMB_Monitoring/WP 7.6 Data Characterization SAP/tmp_RE/Coding/level3/Preg_exlusions/"
col <- "name_event"
id <- "person_id"
dt <- "date_event"
FILE <- fread(file = paste0(path,"input_preg.csv"))
setnames(FILE, c(col,id,dt), c("col","id","dt"))
FILE <- FILE[, index := seq_len(.N)]
FILE1 <- unique(FILE[col == "start_of_pregnancy",])[, index := NULL]
setnames(FILE1, c("col","dt"), c("pregnant","dt_pregnant"))
FILE2 <- unique(FILE[col == "end_of_prengnancy",])
FILE3 <- merge(FILE2,FILE1, by = "id", allow.cartesian = T )
View(FILE2)
View(FILE3)
library("data.table")
path <- "Y:/Studies/ConcePTION/B_Documentation/2 Protocol_DSMB_Monitoring/WP 7.6 Data Characterization SAP/tmp_RE/Coding/level3/Preg_exlusions/"
col <- "name_event"
id <- "person_id"
dt <- "date_event"
FILE <- fread(file = paste0(path,"input_preg.csv"))
setnames(FILE, c(col,id,dt), c("col","id","dt"))
FILE <- FILE[, index := seq_len(.N)]
FILE1 <- unique(FILE[col == "start_of_pregnancy",])[, index := NULL]
setnames(FILE1, c("col","dt"), c("pregnant","dt_pregnant"))
FILE2 <- unique(FILE[col == "end_of_prengnancy",])
setnames(FILE1, c("col","dt"), c("end","dt_end"))
FILE3 <- merge(FILE2,FILE1, by = "id", allow.cartesian = T )
library("data.table")
path <- "Y:/Studies/ConcePTION/B_Documentation/2 Protocol_DSMB_Monitoring/WP 7.6 Data Characterization SAP/tmp_RE/Coding/level3/Preg_exlusions/"
col <- "name_event"
id <- "person_id"
dt <- "date_event"
FILE <- fread(file = paste0(path,"input_preg.csv"))
setnames(FILE, c(col,id,dt), c("col","id","dt"))
FILE <- FILE[, index := seq_len(.N)]
FILE1 <- unique(FILE[col == "start_of_pregnancy",])[, index := NULL]
setnames(FILE1, c("col","dt"), c("pregnant","dt_pregnant"))
FILE2 <- unique(FILE[col == "end_of_prengnancy",])
setnames(FILE2, c("col","dt"), c("end","dt_end"))
FILE3 <- merge(FILE2,FILE1, by = "id", allow.cartesian = T )
library("data.table")
path <- "Y:/Studies/ConcePTION/B_Documentation/2 Protocol_DSMB_Monitoring/WP 7.6 Data Characterization SAP/tmp_RE/Coding/level3/Preg_exlusions/"
col <- "name_event"
id <- "person_id"
dt <- "date_event"
FILE <- fread(file = paste0(path,"input_preg.csv"))
View(FILE)
library("data.table")
path <- "Y:/Studies/ConcePTION/B_Documentation/2 Protocol_DSMB_Monitoring/WP 7.6 Data Characterization SAP/tmp_RE/Coding/level3/Preg_exlusions/"
col <- "name_event"
id <- "person_id"
dt <- "date_event"
FILE <- fread(file = paste0(path,"input_preg.csv"))
date_cols<-c("date_event")
FILE[,(date_cols) := lapply(.SD,function(x) (as.character(x))),.SDcols=date_cols]
FILE[,(date_cols) := lapply(.SD,function(x) (as.Date(x,"%Y%m%d"))),.SDcols=date_cols]
View(FILE)
setnames(FILE, c(col,id,dt), c("col","id","dt"))
FILE <- FILE[, index := seq_len(.N)]
FILE1 <- unique(FILE[col == "start_of_pregnancy",])[, index := NULL]
setnames(FILE1, c("col","dt"), c("pregnant","dt_pregnant"))
FILE2 <- unique(FILE[col == "end_of_prengnancy",])
setnames(FILE2, c("col","dt"), c("end","dt_end"))
FILE3 <- merge(FILE2,FILE1, by = "id", allow.cartesian = T )
View(FILE3)
FILE3 <- FILE3[end_dt - dt_pregnant < 23 & end_dt - dt_pregnant > 0 , Delete := T ]
FILE3 <- FILE3[dt_end - dt_pregnant < 23 & dt_end - dt_pregnant > 0 , Delete := T ]
View(FILE3)
library("data.table")
path <- "Y:/Studies/ConcePTION/B_Documentation/2 Protocol_DSMB_Monitoring/WP 7.6 Data Characterization SAP/tmp_RE/Coding/level3/Preg_exlusions/"
col <- "name_event"
id <- "person_id"
dt <- "date_event"
FILE <- fread(file = paste0(path,"input_preg.csv"))
date_cols<-c("date_event")
FILE[,(date_cols) := lapply(.SD,function(x) (as.character(x))),.SDcols=date_cols]
FILE[,(date_cols) := lapply(.SD,function(x) (as.Date(x,"%Y%m%d"))),.SDcols=date_cols]
setnames(FILE, c(col,id,dt), c("col","id","dt"))
FILE <- FILE[, index := seq_len(.N)]
FILE1 <- unique(FILE[col == "start_of_pregnancy",])[, index := NULL]
setnames(FILE1, c("col","dt"), c("pregnant","dt_pregnant"))
FILE2 <- unique(FILE[col == "end_of_prengnancy",])
setnames(FILE2, c("col","dt"), c("end","dt_end"))
FILE3 <- merge(FILE2,FILE1, by = "id", allow.cartesian = T )
FILE3 <- FILE3[dt_end - dt_pregnant < 161 & dt_end - dt_pregnant > 0 , Delete := T ]
View(FILE3)
FILE3 <- merge(FILE,FILE3[,.(index,Delete)], by = "index",all.x = T, allow.cartesian = T )
View(FILE3)
rm(list = ls(all=TRUE))
library(data.table)
library(peakRAM)
INC <- "year"
path<-"Y:/Studies/ConcePTION/B_Documentation/2 Protocol_DSMB_Monitoring/WP 7.6 Data Characterization SAP/tmp_RE/Coding/RE_CountPersonTime/V12"
r_file<-"CountPersonTimeV12.5.R"
source(paste0(path,"/",r_file))
rm(list = ls(all=TRUE))
library(data.table)
#library(peakRAM)
INC <- "year"
path<-"Y:/Studies/ConcePTION/B_Documentation/2 Protocol_DSMB_Monitoring/WP 7.6 Data Characterization SAP/tmp_RE/Coding/RE_CountPersonTime/V12"
r_file<-"CountPersonTimeV12.5.R"
source(paste0(path,"/",r_file))
#source(paste0(path,"/Function CreateLargeSimulatedDataset_v5.R"))
#compare <- fread("c:/output.csv")
#CreateLargeSimulatedDatasetCSV(Inputfolder=path,Outputfolder=path,N=1000,Identifier_name="person_id",Delimiter=",")
Input_file1<-fread(paste0(path,"/input_events_s.csv"), sep = ",")
Input_file2<-fread(paste0(path,"/input_times_s.csv"), sep = ",")
date_cols<-c("start_date","end_date","date_birth")
Input_file2[,(date_cols) := lapply(.SD,function(x) (as.character(x))),.SDcols=date_cols]
Input_file2[,(date_cols) := lapply(.SD,function(x) (as.Date(x,"%Y%m%d"))),.SDcols=date_cols]
Input_file1[,date_event := as.character(date_event)]
Input_file1[,date_event:= as.Date(date_event,"%Y%m%d")]
rm(list = ls(all=TRUE))
library(data.table)
INC <- "year"
install.packages("data.table")
library(data.table)
INC <- "year"
path<-"Y:/Studies/ConcePTION/B_Documentation/2 Protocol_DSMB_Monitoring/WP 7.6 Data Characterization SAP/tmp_RE/Coding/RE_CountPersonTime/V12"
r_file<-"CountPersonTimeV12.5.R"
source(paste0(path,"/",r_file))
Input_file1<-fread(paste0(path,"/input_events_s.csv"), sep = ",")
Input_file2<-fread(paste0(path,"/input_times_s.csv"), sep = ",")
date_cols<-c("start_date","end_date","date_birth")
Input_file2[,(date_cols) := lapply(.SD,function(x) (as.character(x))),.SDcols=date_cols]
Input_file2[,(date_cols) := lapply(.SD,function(x) (as.Date(x,"%Y%m%d"))),.SDcols=date_cols]
Input_file1[,date_event := as.character(date_event)]
Input_file1[,date_event:= as.Date(date_event,"%Y%m%d")]
Output_file1_rec<-CountPersonTime(
Dataset_events = Input_file1,
Dataset = Input_file2,
Person_id = "person_id",
Start_study_time = "20150101",
End_study_time = "20191231",
Start_date = "start_date",
End_date = "end_date",
Birth_date = "date_birth",
Strata = c("sex","city"),
Name_event = "name_event",
Date_event = "date_event",
Age_bands = c(0,17,44,64),
Increment=INC,
Outcomes =c("outcome1","outcome2"),
Unit_of_age = "year",
include_remaning_ages = T,
Aggregate = F,
Rec_events = T,
Rec_period = c(10,5)
)
path<-"Y:/Studies/ConcePTION/B_Documentation/2 Protocol_DSMB_Monitoring/WP 7.6 Data Characterization SAP/tmp_RE/Coding/RE_CountPersonTime/V12"
r_file<-"CountPersonTimeV12.2_IDATE_RBIND_PT.R"
source(paste0(path,"/",r_file))
peakRAM(Output_file2_rec<-CountPersonTime(
Dataset_events = Input_file1,
Dataset = Input_file2,
Person_id = "person_id",
Start_study_time = "20150101",
End_study_time = "20191231",
Start_date = "start_date",
End_date = "end_date",
Birth_date = "date_birth",
Strata = c("sex","city"),
Name_event = "name_event",
Date_event = "date_event",
Age_bands = c(0,17,44,64),
Increment=INC,
Outcomes =c("outcome1","outcome2"),
Unit_of_age = "year",
include_remaning_ages = T,
Aggregate = F,
Rec_events = T,
Rec_period = c(10,5)
))
Output_file2_rec<-CountPersonTime(
Dataset_events = Input_file1,
Dataset = Input_file2,
Person_id = "person_id",
Start_study_time = "20150101",
End_study_time = "20191231",
Start_date = "start_date",
End_date = "end_date",
Birth_date = "date_birth",
Strata = c("sex","city"),
Name_event = "name_event",
Date_event = "date_event",
Age_bands = c(0,17,44,64),
Increment=INC,
Outcomes =c("outcome1","outcome2"),
Unit_of_age = "year",
include_remaning_ages = T,
Aggregate = F,
Rec_events = T,
Rec_period = c(10,5)
)
compare2 <-  Output_file1_rec == Output_file2_rec
test2 <- sum(compare2==F)
test2.1 <- sum(is.na(compare2))
View(compare2)
View(Output_file1_rec)
install.packages("epitools")
library("epitools")
pois.exact(0, pt = 10000, conf.level = 0.95)
pois.exact(4, pt = 10000, conf.level = 0.95)
pois.exact(0, pt = 10000, conf.level = 0.95)
pois.exact(20, pt = 10000, conf.level = 0.95)
install.packages("sqldf")
library("sqldf")
test <- sqldf("select event_code from FILE")
plot(0:10, 0:10)
add_tooltip(plot(0:10, 0:10), html, on = c("hover", "click"))
library(ggvis)
library("ggvis")
install.packages("ggvis")
library("ggvis")
add_tooltip(plot(0:10, 0:10), html, on = c("hover", "click"))
x <- plot(0:10, 0:10)
x <- plot(0:10, 0:10, ylab = "test")
x <- renderPlot(plot(0:10, 0:10, ylab = "test"))
library("shiny")
x <- renderPlot(plot(0:10, 0:10, ylab = "test"))
fig <- plot_ly(plot(0:10, 0:10, ylab = "test"))
library("ploty")
library("plotly")
fig <- plot_ly(plot(0:10, 0:10, ylab = "test"))
install.packages("gridGraphics")
#Author: Vjola Hoxhaj Drs./Roel Elbers MSc.
#email: v.hoxhaj@umcutrecht.nl/r.j.h.elbers@umcutrecht.nl
#Organisation: UMC Utrecht, Utrecht, The Netherlands
#Date: 15/07/2021
rm(list=ls())
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
###################################################
#Parameters
#################################################
#females age
min_age_preg<-12
max_age_preg<-55
#Set parameters basic parameters
start_study_date <- "20140101"
end_study_date <- "20181231"
lookback_period <- 365
Age_min <- 0
Age_max <- 56
######################################################################################################
#Specify all meanings that refer to birth registry in the SURVEY_ID table(if applicable) for identifying pregnancy
#example meanings_birth_registry<-c("birth_registry", "birth_registry_meanings")
#keep in mind this records will be classified as end_of_pregnancy so no spontaneous abortion registry should be included
meanings_birth_registry<-c("birth_registry_mother")
#######################################################################################################
source("packages.R")
source("99_path.R")
source(paste0(pre_dir, "info.R"))
setwd(projectFolder)
#################################################
#Study_source_population
#################################################
system.time(source(paste0(pre_dir,"study_source_population_script.R")))
i="ALL"
report_dir1 <- substr(std_source_pop_dir,1,nchar(std_source_pop_dir)-1)
report_dir2 <- paste0(std_source_pop_dir,"Masked")
TEMP1 <- INPUTMATRIX(
d = TEMP,
value = "PYSource",
type = "none",
var = "year",
var.v= years,
cat = "Ageband" ,
cat.v = stack ,
per = F,
perdir = "col",
mask = F
)
colnames(TEMP) <- c("year","Ageband","Order","NbSource","PYSource","SpellsSource","NbStudy","PYStudy","SpellsStudy")
TEMP <- TEMP[year != 9999,]
setorder(TEMP,Order)
years <- c(min(TEMP[,year]):max(TEMP[,year]))
stack <- unique(TEMP[["Ageband"]])
colors <- colorRamps::matlab.like(length(stack))
TEMP1 <- INPUTMATRIX(
d = TEMP,
value = "PYSource",
type = "none",
var = "year",
var.v= years,
cat = "Ageband" ,
cat.v = stack ,
per = F,
perdir = "col",
mask = F
)
#par(mar=c(5, 4, 4, 4), xpd=TRUE)
par(mar = c(4.5,4.5,1,4),mgp = c(3.5,1,0), oma = c(1,1,1,1), xpd = T)
barplot(TEMP1,main = "Source",ylim = c(0,max(TEMP[["PYSource"]])+(0.1*max(TEMP[["PYSource"]]))),xlab = "Year op_start_date", ylab = "Personyears"  , col = colors, cex.axis = 1, cex.names = 1.2 )
#legend("right",title = "Agebands",legend =  rownames(TEMP1), col = c(2:(length(years)+1)), cex = 0.4,pch=10, box.col = "white")
TEMP <- fread(paste0(report_dir1,"/",i,"_R_01_02_CompareToSource.csv"), sep = ";")
colnames(TEMP) <- c("year","Ageband","Order","NbSource","PYSource","SpellsSource","NbStudy","PYStudy","SpellsStudy")
TEMP <- TEMP[year != 9999,]
setorder(TEMP,Order)
years <- c(min(TEMP[,year]):max(TEMP[,year]))
stack <- unique(TEMP[["Ageband"]])
colors <- colorRamps::matlab.like(length(stack))
TEMP1 <- INPUTMATRIX(
d = TEMP,
value = "PYSource",
type = "none",
var = "year",
var.v= years,
cat = "Ageband" ,
cat.v = stack ,
per = F,
perdir = "col",
mask = F
)
#par(mar=c(5, 4, 4, 4), xpd=TRUE)
par(mar = c(4.5,4.5,1,4),mgp = c(3.5,1,0), oma = c(1,1,1,1), xpd = T)
barplot(TEMP1,main = "Source",ylim = c(0,max(TEMP[["PYSource"]])+(0.1*max(TEMP[["PYSource"]]))),xlab = "Year op_start_date", ylab = "Personyears"  , col = colors, cex.axis = 1, cex.names = 1.2 )
#legend("right",title = "Agebands",legend =  rownames(TEMP1), col = c(2:(length(years)+1)), cex = 0.4,pch=10, box.col = "white")
x <- recordPlot()
#install.packages("gridGraphics")
install.packages("cowplot")
library("cowplot")
x2 <- ggdraw(x)
library("ggplot2")
ggplotly(x2)
x2 <- ggdraw(x) +
theme(text=element_text(size = 10),
axis.text.x = element_text(angle = 0, hjust = 1),
axis.title.x = element_text(colour = "#76b82a", margin = margin(2.5,1,1,1)),
axis.title.y = element_text(colour = "#76b82a", margin = margin(1,1,1,12)),
plot.title = element_text(colour = "#76b82a"),
strip.text.y = element_text(angle = 0),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 7))
x2
x <- recordPlot()
ggdraw(x)
x2 <- ggdraw(x)
x2
x <- recordPlot()
x2 <- ggdraw(x) +
theme(text=element_text(size = 10),
axis.text.x = element_text(angle = 0, hjust = 1),
axis.title.x = element_text(colour = "#76b82a", margin = margin(2.5,1,1,1)),
axis.title.y = element_text(colour = "#76b82a", margin = margin(1,1,1,12)),
plot.title = element_text(colour = "#76b82a"),
strip.text.y = element_text(angle = 0),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 7))
x2
rm(list=ls())
i="ALL"
report_dir1 <- substr(std_source_pop_dir,1,nchar(std_source_pop_dir)-1)
report_dir2 <- paste0(std_source_pop_dir,"Masked")
#install.packages("gridGraphics")
#install.packages("cowplot")
library("gridGraphics")
library("cowplot")
library("ggplot2")
TEMP <- fread(paste0(report_dir1,"/",i,"_R_01_02_CompareToSource.csv"), sep = ";")
colnames(TEMP) <- c("year","Ageband","Order","NbSource","PYSource","SpellsSource","NbStudy","PYStudy","SpellsStudy")
TEMP <- TEMP[year != 9999,]
setorder(TEMP,Order)
years <- c(min(TEMP[,year]):max(TEMP[,year]))
stack <- unique(TEMP[["Ageband"]])
colors <- colorRamps::matlab.like(length(stack))
TEMP1 <- INPUTMATRIX(
d = TEMP,
value = "PYSource",
type = "none",
var = "year",
var.v= years,
cat = "Ageband" ,
cat.v = stack ,
per = F,
perdir = "col",
mask = F
)
#par(mar=c(5, 4, 4, 4), xpd=TRUE)
par(mar = c(4.5,4.5,1,4),mgp = c(3.5,1,0), oma = c(1,1,1,1), xpd = T)
barplot(TEMP1,main = "Source",ylim = c(0,max(TEMP[["PYSource"]])+(0.1*max(TEMP[["PYSource"]]))),xlab = "Year op_start_date", ylab = "Personyears"  , col = colors, cex.axis = 1, cex.names = 1.2 )
#legend("right",title = "Agebands",legend =  rownames(TEMP1), col = c(2:(length(years)+1)), cex = 0.4,pch=10, box.col = "white")
rm(list=ls())
i="ALL"
report_dir1 <- substr(std_source_pop_dir,1,nchar(std_source_pop_dir)-1)
report_dir2 <- paste0(std_source_pop_dir,"Masked")
rm(list=ls())
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
###################################################
#Parameters
#################################################
#females age
min_age_preg<-12
max_age_preg<-55
#Set parameters basic parameters
start_study_date <- "20140101"
end_study_date <- "20181231"
lookback_period <- 365
Age_min <- 0
Age_max <- 56
######################################################################################################
#Specify all meanings that refer to birth registry in the SURVEY_ID table(if applicable) for identifying pregnancy
#example meanings_birth_registry<-c("birth_registry", "birth_registry_meanings")
#keep in mind this records will be classified as end_of_pregnancy so no spontaneous abortion registry should be included
meanings_birth_registry<-c("birth_registry_mother")
#######################################################################################################
source("packages.R")
source("99_path.R")
source(paste0(pre_dir, "info.R"))
setwd(projectFolder)
#################################################
#Study_source_population
#################################################
system.time(source(paste0(pre_dir,"study_source_population_script.R")))
i="ALL"
report_dir1 <- substr(std_source_pop_dir,1,nchar(std_source_pop_dir)-1)
report_dir2 <- paste0(std_source_pop_dir,"Masked")
library("gridGraphics")
library("cowplot")
library("ggplot2")
TEMP <- fread(paste0(report_dir1,"/",i,"_R_01_02_CompareToSource.csv"), sep = ";")
colnames(TEMP) <- c("year","Ageband","Order","NbSource","PYSource","SpellsSource","NbStudy","PYStudy","SpellsStudy")
TEMP <- TEMP[year != 9999,]
setorder(TEMP,Order)
years <- c(min(TEMP[,year]):max(TEMP[,year]))
stack <- unique(TEMP[["Ageband"]])
colors <- colorRamps::matlab.like(length(stack))
TEMP1 <- INPUTMATRIX(
d = TEMP,
value = "PYSource",
type = "none",
var = "year",
var.v= years,
cat = "Ageband" ,
cat.v = stack ,
per = F,
perdir = "col",
mask = F
)
#par(mar=c(5, 4, 4, 4), xpd=TRUE)
par(mar = c(4.5,4.5,1,4),mgp = c(3.5,1,0), oma = c(1,1,1,1), xpd = T)
barplot(TEMP1,main = "Source",ylim = c(0,max(TEMP[["PYSource"]])+(0.1*max(TEMP[["PYSource"]]))),xlab = "Year op_start_date", ylab = "Personyears"  , col = colors, cex.axis = 1, cex.names = 1.2 )
#legend("right",title = "Agebands",legend =  rownames(TEMP1), col = c(2:(length(years)+1)), cex = 0.4,pch=10, box.col = "white")
x <- recordPlot()
x2 <- ggdraw(x) +
theme(text=element_text(size = 10),
axis.text.x = element_text(angle = 0, hjust = 1),
axis.title.x = element_text(colour = "#76b82a", margin = margin(2.5,1,1,1)),
axis.title.y = element_text(colour = "#76b82a", margin = margin(1,1,1,12)),
plot.title = element_text(colour = "#76b82a"),
strip.text.y = element_text(angle = 0),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 7))
ggplotly(x2)
x2
x
#par(mar=c(5, 4, 4, 4), xpd=TRUE)
par(mar = c(4.5,4.5,1,4),mgp = c(3.5,1,0), oma = c(1,1,1,1), xpd = T)
barplot(TEMP1,main = "Source",ylim = c(0,max(TEMP[["PYSource"]])+(0.1*max(TEMP[["PYSource"]]))),xlab = "Year op_start_date", ylab = "Personyears"  , col = colors, cex.axis = 1, cex.names = 1.2 )
legend("right",title = "Agebands",legend =  rownames(TEMP1), col = c(2:(length(years)+1)), cex = 0.4,pch=10, box.col = "white")
x <- recordPlot()
x2 <- ggdraw(x) +
theme(text=element_text(size = 10),
axis.text.x = element_text(angle = 0, hjust = 1),
axis.title.x = element_text(colour = "#76b82a", margin = margin(2.5,1,1,1)),
axis.title.y = element_text(colour = "#76b82a", margin = margin(1,1,1,12)),
plot.title = element_text(colour = "#76b82a"),
strip.text.y = element_text(angle = 0),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 7))
ggplotly(x2)
x2
rm(list = ls(all=TRUE))
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
if(!require(devtools)){install.packages("devtools")}
library(devtools)
if(!require(knitr)){install.packages("knitr")}
library(knitr)
if(!require(devtools)) {devtools::install_github("klutometis/roxygen")}
library(roxygen2)
if(!require(testthat)){install.packages("testthat")}
library(testthat)
build()
devtools::test()
